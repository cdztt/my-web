//import { message } from 'antd'
import { useMessage } from '@cdztt/message-react'
import { useCallback, useEffect, useState } from 'react'
import { useDispatch, useSelector } from 'react-redux'
import userSlice from '../../store/user'
import Ai from '../../tools/game/Ai'
import Game from '../../tools/game/Game'
import { GUEST_ID } from '../../tools/variables'
import GameBoard from './GameBoard'
import LeftPanel from './LeftPanel'
import './index.sass'

const cheatPattern = [
    [1, 2, 2],
    [1, 1, 2],
    [2, 1, 1]
]

export default function Tictactoe() {
    const userId = useSelector(state => state.user.userId)
    const dispatch = useDispatch()

    const [mode, setMode] = useState('1')
    const [level, setLevel] = useState('easy')
    //gameÊòØ‰∏Ä‰∏™ÂØπË±°ÔºåÈô§ÈùûsetGameÔºågameÂßãÁªàÊåáÂêëÂêå‰∏Ä‰∏™ÂºïÁî®ÔºåÈÄöËøá‰øÆÊîπgameÂ±ûÊÄßÂÆûÁé∞Ê£ãÁõòÊòæÁ§∫ÁöÑÊõ¥Êñ∞
    const [game, setGame] = useState(new Game(mode))
    const [ai, setAi] = useState(new Ai(level))
    const [step, setStep] = useState(0)//Áî®Êù•Âà∑Êñ∞Ê£ãÁõò
    const [active, setActive] = useState(false)
    const [winCoordinates, setWinCoordinates] = useState([])

    const isAuth = userId !== GUEST_ID
    const currentStep = game.getCurrentStep()
    const isCurrent = step === currentStep
    const snapshot = game.getHistorySnapshot(step)//Ê†πÊçÆstepÁöÑÊîπÂèòËÄåÊîπÂèò

    const message = useMessage()

    //‰ΩúÂºä
    useEffect(() => {
        if (cheatPattern.flat().join('') === snapshot.flat().join('')
            && mode === '0'
            && isAuth
        ) {//ÁôªÂΩïÔºåÁªÉ‰π†Ê®°ÂºèÔºåÁ¨¶Âêà‰ΩúÂºäÂõæÂΩ¢
            dispatch(userSlice.actions.refleshTic('win-hard'))
        }
    }, [dispatch, isAuth, mode, snapshot])

    //ËêΩÂ≠êÊìç‰Ωú
    const dropPiece = useCallback((x, y) => {
        if (active) {
            if (!isCurrent) return//Âú®ÂéÜÂè≤Âø´ÁÖßÈáåËØïÂõæËµ∞Â≠êÊòØÊó†ÊïàÁöÑ

            const result = game.judgeAndRecord(x, y)
            //Êó†Êïà‰ΩçÁΩÆ‰∏çËêΩÂ≠êÔºåÊØîÂ¶ÇÊ∏∏ÊàèÂ∑≤ÁªìÊùüÔºåÁÇπÂáªÂ∑≤ÁªèÊúâÂ≠êÁöÑÊ†ºÂ≠ê
            if (!result.done && result.info === 'ignore') return

            ////Âà∞ËøôÈáåÔºåGameÁ±ªÂ∑≤Á°ÆÂÆöËêΩÂ≠êÔºåÂâçÁ´ØÊâßË°åËêΩÂ≠êÊìç‰Ωú
            if (mode !== '0') {//ÈùûÁªÉ‰π†Ê®°ÂºèÊâçÁî®ai
                ai.input('' + x + y, game.getCurrentPlayer().getOrder().toString())
            }
            setStep(step => step + 1)
            if (!result.done) return

            //Âà∞ËøôÈáåÔºåÊ∏∏ÊàèÁªìÊùü
            let msg = ''
            let gameResult = ai.level
            if (result.info === 'draw') {
                msg += 'Âπ≥Â±Ä'
                gameResult = 'draw-' + gameResult
            }
            else {
                setWinCoordinates(result.winCoordinates)

                msg += `${result.info}Ëµ¢‰∫ÜÔºÅ`
                if (result.info === 'ai') {
                    // eslint-disable-next-line no-unused-vars
                    msg += `Never make mistakes in a hurry.`
                    gameResult = 'lose-' + gameResult
                }
                else {
                    gameResult = 'win-' + gameResult
                }
            }

            //message.info(msg)
            message.show({ content: msg, type: 'info' })
            if (isAuth && mode !== '0') {//ÁôªÂΩï,ÈùûÁªÉ‰π†
                dispatch(userSlice.actions.refleshTic(gameResult))
            }
        }
    //}, [active, ai, dispatch, game, isAuth, isCurrent, mode])
    }, [active, ai, dispatch, game, isAuth, isCurrent, message, mode])

    //aiËêΩÂ≠ê
    const aiDropPiece = useCallback(() => {
        const point = ai.output()
        if (point) {//ÂΩìÊúÄÂêé‰∏Ä‰∏™Ê†ºÂ≠êËµ∞ÂÆåÔºåpointÊòØundefinedÔºåÂøΩÁï•
            const [x, y] = point.split('').map(el => parseInt(el))
            dropPiece(x, y)
        }
    }, [ai, dropPiece])

    //ÂÆûÁé∞aiËêΩÂ≠ê
    useEffect(() => {
        if (game.isAiNext()) {
            aiDropPiece()
        }
    }, [aiDropPiece, game, step])//ÂøÖÈ°ªÈ¢ùÂ§ñËÆ¢ÈòÖstep

    //ÈáçÁΩÆÊ£ãÁõò
    const end = useCallback(() => {
        setStep(0)
        setWinCoordinates([])
        setActive(false)
    }, [])

    //ÁôªÂá∫ÂêéÈáçÁΩÆÊ£ãÁõò
    useEffect(() => {
        end()
    }, [end, userId])

    //ÂØπÊàò
    const start = useCallback(() => {
        setStep(0)
        setWinCoordinates([])
        setGame(new Game(mode))
        setAi(new Ai(level))
        setActive(true)
    }, [level, mode])

    //ÂéÜÂè≤Âø´ÁÖß
    const goToStep = useCallback((step) => {
        setStep(step)
        if (step === 0) {
            setWinCoordinates([])
            setGame(new Game(mode))
            setAi(new Ai(level))
        }
    }, [level, mode])

    return (
        <div className='myapp-tic'>
            <div className='myapp-tic-header'>
                ‚öîÔ∏ètic-tac-toeüõ°Ô∏è
            </div>

            <div className='myapp-tic-main'>
                <div className='myapp-tic-main-left'>
                    <LeftPanel mode={mode}
                        setMode={setMode}
                        level={level}
                        setLevel={setLevel}
                        end={end}
                        start={start}
                    />
                </div>

                <div className='myapp-tic-main-right'>
                    <GameBoard active={active}
                        snapshot={snapshot}
                        dropPiece={dropPiece}
                        currentStep={currentStep}
                        goToStep={goToStep}
                        winCoordinates={winCoordinates}
                    />
                </div>
            </div>
        </div>
    )
}